from decimal import Decimal

from django.db import models
from django.utils.translation import gettext_lazy as _
from django.utils.text import slugify
from django.core.exceptions import ValidationError
from django.core.validators import MinValueValidator
from django.utils import timezone
from django.db.models.signals import post_save, post_delete
from django.dispatch import receiver

from core.models import TimeStampedModel

# =====================
# Model Choices
# =====================


class ProductServiceTypeChoices(models.TextChoices):
    CLASS = "class", _("Class")
    EXPERIENCE = "experience", _("Learning Experience")
    BOOK = "book", _("Book")
    JOINIING_FEE = "joiningfee", _("Joining Fee")


class ProductOrServiceChoices(models.TextChoices):
    SERVICE = "service", _("Service")
    PRODUCT = "product", _("Product")


# =====================
# Models
# =====================


class ProductService(TimeStampedModel):
    """Model for all products and services sold by the company"""

    name = models.CharField(
        _("Name"),
        blank=False,
        null=False,
        max_length=200,
        help_text=_("Required. Max length 200 characters."),
    )
    slug = models.SlugField(
        _("Slug"),
        null=False,
        blank=False,
        unique=True,
        editable=False,
        max_length=100,
        help_text=_(
            "Autogenerated slug. Base slug for product model and any product display model"
        ),
    )
    service_or_product = models.CharField(
        _("Service or Product"),
        null=False,
        blank=False,
        choices=ProductOrServiceChoices.choices,
        help_text="Required",
    )
    ptype = models.CharField(
        _("Product or Service Type"),
        null=False,
        blank=False,
        choices=ProductServiceTypeChoices.choices,
        help_text="Required",
    )
    description = models.TextField(
        _("Product Description"),
        null=False,
        blank=False,
        help_text="Required. Base description of product. Any changes here should be reflected in any display page or language",
    )
    price_summary = models.CharField(
        _("Current Price(s) (￥)"),
        null=False,
        blank=False,
        editable=False,
        max_length=100,
        help_text="Autogenerated",
    )

    def __str__(self):
        return self.name

    def _get_slug_or_raise_custom_error(self):
        slug = slugify(self.name)
        unique_slug = slug

        if not ProductService.objects.filter(slug=unique_slug).exists():
            return unique_slug
        else:
            # Is own slug
            if ProductService.objects.filter(slug=unique_slug)[0].id == self.id:
                return unique_slug

            else:
                similar_object = ProductService.objects.filter(slug=unique_slug)[0]
                raise ValidationError(
                    f"The slug value {unique_slug} indicates this product is not unique. It is similar to the product with name: {similar_object.name}  and id:  {similar_object.id}"
                )

    def clean(self):
        self.slug = self._get_slug_or_raise_custom_error()

    def save(self, *args, **kwargs):
        self.clean()
        super().save(*args, **kwargs)


class ProductServicePrice(TimeStampedModel):
    product_service = models.ForeignKey(
        ProductService,
        blank=False,
        null=False,
        on_delete=models.CASCADE,
        related_name="prices",
    )
    name = models.CharField(
        _("Name"),
        blank=False,
        null=False,
        max_length=200,
        help_text=_("Required. Max length 200 characters."),
    )
    price = models.DecimalField(
        _("Price"),
        blank=False,
        null=False,
        max_digits=10,
        decimal_places=0,
        validators=[MinValueValidator(Decimal("0"))],
        help_text=_("Required. Pretax selling price in Japanese yen. Max digits - 10"),
    )
    start_date = models.DateTimeField(
        _("Start date"),
        blank=False,
        null=False,
        help_text="Required. Please make sure to set this. It is generally never changed",
    )
    is_limited_sale = models.BooleanField(
        _("Is Limited Sale Price"),
        blank=False,
        null=False,
        default=False,
        help_text="If ticked, please make sure to add the end date",
    )
    end_date = models.DateTimeField(
        _("End date"),
        blank=True,
        null=True,
        help_text="NOT Required. Important ** Do not set this for long term prices. It is only used to have a short sale price or to terminate a long term price. It will remove the price from any public display if the current date is later than the end date",
    )

    def __str__(self):
        return f"{self.name} (￥{self.price})"


# =====================
# Display Page Models
# =====================
