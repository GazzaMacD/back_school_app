from django.db import models
from django.utils.translation import gettext_lazy as _
from django.utils.text import slugify
from django.core.exceptions import ValidationError

from core.models import TimeStampedModel


class Product(TimeStampedModel):
    """Model for all products sold by the company"""

    name = models.CharField(
        _("Name"),
        blank=False,
        null=False,
        max_length=200,
        help_text=_("Required. Max length 200 characters."),
    )
    slug = models.SlugField(
        _("Slug"),
        null=False,
        blank=False,
        unique=True,
        editable=False,
        max_length=100,
        help_text=_(
            "Autogenerated slug. Base slug for product model and any product display model"
        ),
    )

    def __str__(self):
        return self.name

    def _get_slug_or_raise_custom_error(self):
        slug = slugify(self.name)
        unique_slug = slug

        if not Product.objects.filter(slug=unique_slug).exists():
            return unique_slug
        else:
            # Is own slug
            if Product.objects.filter(slug=unique_slug)[0].id == self.id:
                return unique_slug

            else:
                similar_object = Product.objects.filter(slug=unique_slug)[0]
                raise ValidationError(
                    f"The slug value {unique_slug} indicates this product is not unique. It is similar to the product with name: {similar_object.name}  and id:  {similar_object.id}"
                )

    def clean(self):
        self.slug = self._get_slug_or_raise_custom_error()

    def save(self, *args, **kwargs):
        self.clean()
        super().save(*args, **kwargs)
